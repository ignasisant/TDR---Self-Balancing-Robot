CCS PCM C Compiler, Version 4.088, 5967               15-jul-16 13:15

               Filename: C:\Users\Administrator\Desktop\Ignasi i Bernat i Andreu\motor.lst

               ROM used: 237 words (3%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         19 (5%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0C7
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   038
001F:  MOVLW  8C
0020:  MOVWF  04
0021:  BTFSS  00.0
0022:  GOTO   025
0023:  BTFSC  0C.0
0024:  GOTO   03B
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   27,W
0030:  MOVWF  7B
0031:  MOVF   20,W
0032:  MOVWF  0A
0033:  SWAPF  21,W
0034:  MOVWF  03
0035:  SWAPF  7F,F
0036:  SWAPF  7F,W
0037:  RETFIE
0038:  BCF    0A.3
0039:  BCF    0A.4
003A:  GOTO   0A4
003B:  BCF    0A.3
003C:  BCF    0A.4
003D:  GOTO   03E
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
00D8:  BCF    03.5
00D9:  CLRF   28
00DA:  CLRF   29
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT  
.................... #use delay(clock=20000000) 
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... char Keypress=' '; 
00DB:  MOVLW  20
00DC:  MOVWF  2A
.................... int aux=0; 
00DD:  CLRF   2B
.................... char movimiento =' '; 
00DE:  MOVWF  2C
....................  
....................  
....................  
.................... #INT_TIMER1 
.................... void isr_timer1(){ 
.................... //printf("CRIDO"); 
....................       switch (movimiento){ 
*
003E:  MOVF   2C,W
003F:  XORLW  77
0040:  BTFSC  03.2
0041:  GOTO   049
0042:  XORLW  16
0043:  BTFSC  03.2
0044:  GOTO   066
0045:  XORLW  12
0046:  BTFSC  03.2
0047:  GOTO   083
0048:  GOTO   0A0
....................        
....................          case 'w':  // Dos servomotors a 90? 
....................  
....................             switch(aux){ 
0049:  MOVF   2B,W
004A:  BTFSC  03.2
004B:  GOTO   050
004C:  XORLW  01
004D:  BTFSC  03.2
004E:  GOTO   05B
004F:  GOTO   065
....................                case 0:  //temps on els motors estan activats (0,5ms -> 90?) 
....................                   output_high(PIN_B2); 
0050:  BSF    03.5
0051:  BCF    06.2
0052:  BCF    03.5
0053:  BSF    06.2
....................                   //output_low(PIN_B2); 
....................                   set_timer1(65223); 
0054:  MOVLW  FE
0055:  MOVWF  0F
0056:  MOVLW  C7
0057:  MOVWF  0E
....................                   aux = 1; 
0058:  MOVLW  01
0059:  MOVWF  2B
....................                break; 
005A:  GOTO   065
....................                case 1:  //temps on els motors apagats (19,5ms) 
....................                   output_low(PIN_B2); 
005B:  BSF    03.5
005C:  BCF    06.2
005D:  BCF    03.5
005E:  BCF    06.2
....................                  // output_high(PIN_B2); 
....................                   set_timer1(53348); 
005F:  MOVLW  D0
0060:  MOVWF  0F
0061:  MOVLW  64
0062:  MOVWF  0E
....................                   aux = 0;                    
0063:  CLRF   2B
....................                break; 
0064:  GOTO   065
....................             } 
....................             break; 
0065:  GOTO   0A0
....................           
....................          case 'a': //Dos servomotors a 0? 
....................             switch(aux){ 
0066:  MOVF   2B,W
0067:  BTFSC  03.2
0068:  GOTO   06D
0069:  XORLW  01
006A:  BTFSC  03.2
006B:  GOTO   078
006C:  GOTO   082
....................                case 0:  //temps on els motors estan activats (1,5ms -> 0?) 
....................                   output_high(PIN_B2); 
006D:  BSF    03.5
006E:  BCF    06.2
006F:  BCF    03.5
0070:  BSF    06.2
....................                  // output_low(PIN_B2); 
....................                   set_timer1(64598); 
0071:  MOVLW  FC
0072:  MOVWF  0F
0073:  MOVLW  56
0074:  MOVWF  0E
....................                   aux = 1;        
0075:  MOVLW  01
0076:  MOVWF  2B
....................                break; 
0077:  GOTO   082
....................                case 1:  //temps on els motors apagats (18,5ms) 
....................                   output_low(PIN_B2); 
0078:  BSF    03.5
0079:  BCF    06.2
007A:  BCF    03.5
007B:  BCF    06.2
....................                  // output_high(PIN_B2); 
....................                   set_timer1(53973); 
007C:  MOVLW  D2
007D:  MOVWF  0F
007E:  MOVLW  D5
007F:  MOVWF  0E
....................                   aux = 0;                    
0080:  CLRF   2B
....................                break; 
0081:  GOTO   082
....................             }             
....................             break; 
0082:  GOTO   0A0
....................              
....................          case 's': //Dos servomotors a -90? 
....................             switch(aux){ 
0083:  MOVF   2B,W
0084:  BTFSC  03.2
0085:  GOTO   08A
0086:  XORLW  01
0087:  BTFSC  03.2
0088:  GOTO   095
0089:  GOTO   09F
....................                case 0:  //temps on els motors estan activats (2,5ms -> -90?) 
....................                   output_high(PIN_B2); 
008A:  BSF    03.5
008B:  BCF    06.2
008C:  BCF    03.5
008D:  BSF    06.2
....................                 //  output_low(PIN_B2); 
....................                   set_timer1(63973); 
008E:  MOVLW  F9
008F:  MOVWF  0F
0090:  MOVLW  E5
0091:  MOVWF  0E
....................                   aux = 1;        
0092:  MOVLW  01
0093:  MOVWF  2B
....................                break; 
0094:  GOTO   09F
....................                case 1:  //temps on els motors apagats (17,5ms) 
....................                   output_low(PIN_B2); 
0095:  BSF    03.5
0096:  BCF    06.2
0097:  BCF    03.5
0098:  BCF    06.2
....................                  // output_high(PIN_B2); 
....................                   set_timer1(54598); 
0099:  MOVLW  D5
009A:  MOVWF  0F
009B:  MOVLW  46
009C:  MOVWF  0E
....................                   aux = 0;                    
009D:  CLRF   2B
....................                break; 
009E:  GOTO   09F
....................             }             
....................             break;            
009F:  GOTO   0A0
....................       } 
....................           
....................    } 
....................  
....................        
00A0:  BCF    0C.0
00A1:  BCF    0A.3
00A2:  BCF    0A.4
00A3:  GOTO   025
.................... #int_rda 
.................... void serial_isr() { 
....................    Keypress=0x00; 
00A4:  CLRF   2A
....................    if(kbhit()){ 
00A5:  BTFSS  0C.5
00A6:  GOTO   0C3
....................    Keypress=getc(); 
00A7:  BTFSS  0C.5
00A8:  GOTO   0A7
00A9:  MOVF   1A,W
00AA:  MOVWF  2A
....................     putchar(Keypress); 
00AB:  MOVF   2A,W
00AC:  BTFSS  0C.4
00AD:  GOTO   0AC
00AE:  MOVWF  19
....................       switch(keypress){ 
00AF:  MOVF   2A,W
00B0:  XORLW  77
00B1:  BTFSC  03.2
00B2:  GOTO   0BA
00B3:  XORLW  16
00B4:  BTFSC  03.2
00B5:  GOTO   0BD
00B6:  XORLW  12
00B7:  BTFSC  03.2
00B8:  GOTO   0C0
00B9:  GOTO   0C3
....................          case 'w': 
....................             movimiento = 'w'; 
00BA:  MOVLW  77
00BB:  MOVWF  2C
....................              
....................          break; 
00BC:  GOTO   0C3
....................           
....................          case 'a': 
....................             movimiento = 'a'; 
00BD:  MOVLW  61
00BE:  MOVWF  2C
....................          break; 
00BF:  GOTO   0C3
....................           
....................          case 's': 
....................             movimiento = 's'; 
00C0:  MOVLW  73
00C1:  MOVWF  2C
....................          break; 
00C2:  GOTO   0C3
....................     } 
....................   } 
.................... } 
....................  
00C3:  BCF    0C.5
00C4:  BCF    0A.3
00C5:  BCF    0A.4
00C6:  GOTO   025
.................... void main(){ 
00C7:  CLRF   04
00C8:  BCF    03.7
00C9:  MOVLW  1F
00CA:  ANDWF  03,F
00CB:  MOVLW  81
00CC:  BSF    03.5
00CD:  MOVWF  19
00CE:  MOVLW  A6
00CF:  MOVWF  18
00D0:  MOVLW  90
00D1:  BCF    03.5
00D2:  MOVWF  18
00D3:  BSF    03.5
00D4:  BSF    1F.0
00D5:  BSF    1F.1
00D6:  BSF    1F.2
00D7:  BCF    1F.3
....................    set_tris_b(0x00); 
*
00DF:  MOVLW  00
00E0:  BSF    03.5
00E1:  MOVWF  06
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //activa el timer 1 
00E2:  MOVLW  B5
00E3:  BCF    03.5
00E4:  MOVWF  10
....................    enable_interrupts(int_rda); 
00E5:  BSF    03.5
00E6:  BSF    0C.5
....................    enable_interrupts(INT_TIMER1); 
00E7:  BSF    0C.0
....................    enable_interrupts(global); 
00E8:  MOVLW  C0
00E9:  BCF    03.5
00EA:  IORWF  0B,F
....................     
....................    do{ 
....................     
....................    }while(true); 
.................... } 
00EB:  GOTO   0EB
00EC:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
