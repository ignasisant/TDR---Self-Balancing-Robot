CCS PCM C Compiler, Version 4.088, 5967               12-jul-16 10:33

               Filename: C:\Users\Administrator\Desktop\Ignasi i Bernat i Andreu\contador.lst

               ROM used: 296 words (4%)
                         Largest free fragment is 2048
               RAM used: 25 (7%) at main() level
                         27 (7%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B0
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   033
.................... #include <16f877.h>                    // Selecciona el PIC 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT,BROWNOUT // Opciones de configuración 
.................... #use delay(clock=20000000)              // Velocidad del Cristal : 4 Mhz 
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) // Definición del RS232 
....................  
....................  
....................  
.................... byte const NInts=152;                   // Numero de interrupciones para 1 Segundo (CALCULADLO)!!!!!!!! 
....................  
.................... // VARIABLES GLOBALES 
....................  
.................... int16 C_Ints=0;                         // Contador de Interrupciones ocurridas 
*
00C1:  BCF    03.5
00C2:  CLRF   28
00C3:  CLRF   29
.................... char Flag=0;                           // Flag que cambia cada NInts interrupciones 
00C4:  CLRF   2A
....................  
.................... void binari(int a) 
.................... { 
....................      
....................    switch (a) 
....................    { 
*
005F:  MOVF   32,W
0060:  ADDLW  F6
0061:  BTFSC  03.0
0062:  GOTO   0A1
0063:  ADDLW  0A
0064:  GOTO   0A2
....................    case 0: 
....................       output_d(0b00111111); 
0065:  BSF    03.5
0066:  CLRF   08
0067:  MOVLW  3F
0068:  BCF    03.5
0069:  MOVWF  08
....................       break; 
006A:  GOTO   0A1
....................    case 1: 
....................       output_d(0b00000110); 
006B:  BSF    03.5
006C:  CLRF   08
006D:  MOVLW  06
006E:  BCF    03.5
006F:  MOVWF  08
....................       break; 
0070:  GOTO   0A1
....................    case 2: 
....................       output_d(0b01011011); 
0071:  BSF    03.5
0072:  CLRF   08
0073:  MOVLW  5B
0074:  BCF    03.5
0075:  MOVWF  08
....................       break; 
0076:  GOTO   0A1
....................    case 3: 
....................       output_d(0b01001111); 
0077:  BSF    03.5
0078:  CLRF   08
0079:  MOVLW  4F
007A:  BCF    03.5
007B:  MOVWF  08
....................       break; 
007C:  GOTO   0A1
....................    case 4: 
....................       output_d(0b01100110); 
007D:  BSF    03.5
007E:  CLRF   08
007F:  MOVLW  66
0080:  BCF    03.5
0081:  MOVWF  08
....................       break; 
0082:  GOTO   0A1
....................    case 5: 
....................       output_d(0b01101101); 
0083:  BSF    03.5
0084:  CLRF   08
0085:  MOVLW  6D
0086:  BCF    03.5
0087:  MOVWF  08
....................       break; 
0088:  GOTO   0A1
....................    case 6: 
....................       output_d(0b01111101); 
0089:  BSF    03.5
008A:  CLRF   08
008B:  MOVLW  7D
008C:  BCF    03.5
008D:  MOVWF  08
....................       break; 
008E:  GOTO   0A1
....................    case 7: 
....................       output_d(0b00000111); 
008F:  BSF    03.5
0090:  CLRF   08
0091:  MOVLW  07
0092:  BCF    03.5
0093:  MOVWF  08
....................       break; 
0094:  GOTO   0A1
....................    case 8: 
....................       output_d(0b01111111); 
0095:  BSF    03.5
0096:  CLRF   08
0097:  MOVLW  7F
0098:  BCF    03.5
0099:  MOVWF  08
....................       break; 
009A:  GOTO   0A1
....................    case 9: 
....................       output_d(0b01100111); 
009B:  BSF    03.5
009C:  CLRF   08
009D:  MOVLW  67
009E:  BCF    03.5
009F:  MOVWF  08
....................       break; 
00A0:  GOTO   0A1
....................     
....................  
....................    } 
....................     
....................     
.................... } 
00A1:  RETLW  00
....................  
....................  
....................  
....................  
....................  
.................... #int_RTCC                              // Interrupción por desbordamiento 
.................... void RTCC_isr() {                           // del TIMER0 RTCC 
....................  
....................   if(C_Ints > NInts){                  // Si las ints ocurridas > ints para 1 Seg. 
*
0033:  MOVF   29,F
0034:  BTFSS  03.2
0035:  GOTO   03A
0036:  MOVF   28,W
0037:  SUBLW  98
0038:  BTFSC  03.0
0039:  GOTO   043
....................  
....................     if(Flag==0){ 
003A:  MOVF   2A,F
003B:  BTFSS  03.2
003C:  GOTO   040
....................       Flag=1; 
003D:  MOVLW  01
003E:  MOVWF  2A
....................     } 
....................     else{ 
003F:  GOTO   041
....................       Flag=0; 
0040:  CLRF   2A
....................     } 
....................     C_Ints=0;                          // Reinicializo Contador de Ints 
0041:  CLRF   29
0042:  CLRF   28
....................   } 
....................   ++C_Ints;                            // Incremento el número de interrupciones 
0043:  INCF   28,F
0044:  BTFSC  03.2
0045:  INCF   29,F
.................... }                                      // Ocurridas 
....................  
....................  
....................  
0046:  BCF    0B.2
0047:  BCF    0A.3
0048:  BCF    0A.4
0049:  GOTO   01D
.................... void main(void) { 
*
00B0:  CLRF   04
00B1:  BCF    03.7
00B2:  MOVLW  1F
00B3:  ANDWF  03,F
00B4:  MOVLW  81
00B5:  BSF    03.5
00B6:  MOVWF  19
00B7:  MOVLW  A6
00B8:  MOVWF  18
00B9:  MOVLW  90
00BA:  BCF    03.5
00BB:  MOVWF  18
00BC:  BSF    03.5
00BD:  BSF    1F.0
00BE:  BSF    1F.1
00BF:  BSF    1F.2
00C0:  BCF    1F.3
....................  
....................  
....................   int a = 0, un=0, des=0, i; 
*
00C7:  CLRF   2C
00C8:  CLRF   2D
00C9:  CLRF   2E
....................   int1 p = 0; 
00CA:  BCF    30.0
....................   char K; 
....................   K=Flag; 
00CB:  MOVF   2A,W
00CC:  MOVWF  31
....................   setup_counters(RTCC_INTERNAL,RTCC_DIV_128);// TIMER0: Clock Interno, Presescaler 128 
00CD:  BSF    03.5
00CE:  MOVF   01,W
00CF:  ANDLW  C0
00D0:  IORLW  06
00D1:  MOVWF  01
00D2:  CLRWDT
....................   enable_interrupts(INT_RTCC);               // Habilito Interrupción RTCC 
00D3:  BCF    03.5
00D4:  BSF    0B.5
....................   enable_interrupts(global);                 // Habilito Interrupciones 
00D5:  MOVLW  C0
00D6:  IORWF  0B,F
....................  
....................  
....................  
....................   do{ // Bucle infinito 
....................     if (input(PIN_B5) == 0) 
00D7:  BSF    03.5
00D8:  BSF    06.5
00D9:  BCF    03.5
00DA:  BTFSC  06.5
00DB:  GOTO   0ED
....................     { 
....................      
....................     if(Flag==K){} 
00DC:  MOVF   31,W
00DD:  SUBWF  2A,W
00DE:  BTFSC  03.2
....................     else 
00DF:  GOTO   0ED
....................     {                                        // si ha cambiado Flag ... 
....................  
....................        
....................       K=Flag;    // Guardo estado anterior de Flag 
00E0:  MOVF   2A,W
00E1:  MOVWF  31
....................        
....................        
....................        
....................       if (a == 0)p = 0; 
00E2:  MOVF   2C,F
00E3:  BTFSC  03.2
00E4:  BCF    30.0
....................       if (a == 99)p = 1; 
00E5:  MOVF   2C,W
00E6:  SUBLW  63
00E7:  BTFSC  03.2
00E8:  BSF    30.0
....................       if (p == 0)a++; 
00E9:  BTFSS  30.0
00EA:  INCF   2C,F
....................       if (p == 1)a--; 
00EB:  BTFSC  30.0
00EC:  DECF   2C,F
....................     }  
....................     } 
....................     un = a%10; 
00ED:  MOVF   2C,W
00EE:  MOVWF  32
00EF:  MOVLW  0A
00F0:  MOVWF  33
00F1:  CALL   04A
00F2:  MOVF   77,W
00F3:  MOVWF  2D
....................     des = a/10; 
00F4:  MOVF   2C,W
00F5:  MOVWF  32
00F6:  MOVLW  0A
00F7:  MOVWF  33
00F8:  CALL   04A
00F9:  MOVF   78,W
00FA:  MOVWF  2E
....................      
....................     output_bit(PIN_C0, 0); 
00FB:  BCF    07.0
00FC:  BCF    2B.0
00FD:  MOVF   2B,W
00FE:  BSF    03.5
00FF:  MOVWF  07
....................     output_bit(PIN_C1, 1); 
0100:  BCF    03.5
0101:  BSF    07.1
0102:  BCF    2B.1
0103:  MOVF   2B,W
0104:  BSF    03.5
0105:  MOVWF  07
....................     binari(un); 
0106:  BCF    03.5
0107:  MOVF   2D,W
0108:  MOVWF  32
0109:  CALL   05F
....................     output_d(0); 
010A:  BSF    03.5
010B:  CLRF   08
010C:  BCF    03.5
010D:  CLRF   08
....................     output_bit(PIN_C0, 1); 
010E:  BSF    07.0
010F:  BCF    2B.0
0110:  MOVF   2B,W
0111:  BSF    03.5
0112:  MOVWF  07
....................     output_bit(PIN_C1, 0); 
0113:  BCF    03.5
0114:  BCF    07.1
0115:  BCF    2B.1
0116:  MOVF   2B,W
0117:  BSF    03.5
0118:  MOVWF  07
....................     binari(des); 
0119:  BCF    03.5
011A:  MOVF   2E,W
011B:  MOVWF  32
011C:  CALL   05F
....................     output_d(0); 
011D:  BSF    03.5
011E:  CLRF   08
011F:  BCF    03.5
0120:  CLRF   08
....................      
....................     if (input(PIN_B4) == 0) a = 0; 
0121:  BSF    03.5
0122:  BSF    06.4
0123:  BCF    03.5
0124:  BTFSS  06.4
0125:  CLRF   2C
....................     /* 
....................     if (input(PIN_B3) == 0)  
....................     { 
....................       if (p == 0) p = 1; 
....................       else if (p == 1) p = 0; 
....................     } 
....................     */ 
....................   }While(TRUE); 
.................... } 
0126:  GOTO   0D7
....................  
0127:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
